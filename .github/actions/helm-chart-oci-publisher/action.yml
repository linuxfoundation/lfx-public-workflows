---
# Copyright Dimitrij Drus <dadrus@gmx.de> and the Heimdall Project Authors.
# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: Apache-2.0

name: Helm Chart OCI Publisher

description: Publish Helm Charts to OCI-based registries

author: dadrus

inputs:
  name:
    required: true
    description: The chart name
  repository:
    required: true
    description: The chart repository name
  chart_version:
    required: true
    description: The version of the chart
  app_version:
    required: false
    description: Set the appVersion in the chart to this version
  path:
    required: false
    description: Where to find the chart. Defaults to 'charts/{name}'
  registry:
    required: true
    description: The OCI registry to use
  registry_username:
    required: true
    description: The OCI registry username
  registry_password:
    required: true
    description: The OCI registry password
  helm_version:
    required: false
    description: The Helm CLI version
    default: 3.18.4

outputs:
  image:
    value: ${{ steps.result.outputs.image }}
    description: The chart image of the form '{registry}/{repository}/{image}:{tag}'
  image_name:
    value: ${{ steps.result.outputs.image_name }}
    description: The chart image name of the form '{registry}/{repository}/{image}'
  digest:
    value: ${{ steps.result.outputs.image_digest }}
    description: The digest of the image

runs:
  using: composite
  steps:
    - name: Install Helm
      shell: bash
      run: |
        set -euo pipefail
        tmpDir="$(mktemp -d)"
        pushd "$tmpDir" >& /dev/null
      
        curl -sSL -o helm.tar.gz 'https://get.helm.sh/helm-v${{ inputs.helm_version }}-linux-amd64.tar.gz'
        curl -sSL -o helm.tar.gz.sha256 'https://get.helm.sh/helm-v${{ inputs.helm_version }}-linux-amd64.tar.gz.sha256'
        echo "$(cat helm.tar.gz.sha256) helm.tar.gz" | sha256sum --check
        tar xz -f helm.tar.gz
        mkdir -p "$HOME/bin"
        mv linux-amd64/helm "$HOME/bin/helm"
        export PATH="$HOME/bin:$PATH"
        popd >& /dev/null
        rm -rf "$tmpDir"
    - name: Create Chart path
      id: chart-path
      shell: bash
      run: |
        set -euo pipefail
        CHART_PATH="${{ !inputs.path && format('{0}/{1}', 'charts', inputs.name) || inputs.path }}"
        echo "result=$CHART_PATH" >> "$GITHUB_OUTPUT"
    - name: Set appVersion in Chart.yaml
      if: inputs.app_version != ''
      shell: bash
      run: |
        set -euo pipefail
        yq eval '.appVersion = "${{ inputs.app_version }}"' -i '${{ steps.chart-path.outputs.result }}/Chart.yaml'
    - name: Login to helm registry
      shell: bash
      run: |
        set -euo pipefail
        echo '${{ inputs.registry_password }}' | helm registry login -u '${{ inputs.registry_username }}' --password-stdin '${{ inputs.registry }}'
    - name: Package the chart
      shell: bash
      run: |
        set -euo pipefail
        if [ -f '${{ steps.chart-path.outputs.result }}/Chart.lock' ]; then
          yq -r '.dependencies[] | select(.repository | contains("oci://") == false) | "\(.name) \(.repository)"' \
            '${{ steps.chart-path.outputs.result }}/Chart.yaml' | xargs -L1 helm repo add --force-update
          helm dependency build '${{ steps.chart-path.outputs.result }}'
        fi
        helm package '${{ steps.chart-path.outputs.result }}' --version '${{ inputs.chart_version }}'
    - name: Push the packaged chart to the registry
      id: result
      shell: bash
      run: |
        set -euo pipefail
        OUTPUT=$(helm push '${{ inputs.name }}-${{ inputs.chart_version }}.tgz' 'oci://${{ inputs.registry }}/${{ inputs.repository }}' 2>&1) || {
          echo "Helm push failed: $OUTPUT"
          exit 1
        }
        IMAGE_NAME='${{ inputs.registry }}/${{ inputs.repository }}/${{ inputs.name }}'
        IMAGE="$(echo "$OUTPUT" | grep "Pushed:" | awk '{print $2}')"
        DIGEST="$(echo "$OUTPUT" | grep "Digest:" | awk '{print $2}')"
        if [ -z "$IMAGE" ] || [ -z "$DIGEST" ]; then
          echo "Failed to extract image or digest from output: $OUTPUT"
          exit 1
        fi
        {
          echo "image_name=$IMAGE_NAME"
          echo "image=$IMAGE"
          echo "image_digest=$DIGEST"
        } >> "$GITHUB_OUTPUT"
    - name: Logout from the registry
      shell: bash
      run: |
        set -euo pipefail
        helm registry logout '${{ inputs.registry }}'
