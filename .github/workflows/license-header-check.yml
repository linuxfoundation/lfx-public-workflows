---
# Copyright The Linux Foundation and each contributor to LFX.
# SPDX-License-Identifier: MIT

name: License Header Check

on:
  workflow_call:
    inputs:
      copyright_line:
        description: "Copyright line to search for"
        required: false
        type: string
        default: "Copyright The Linux Foundation"
      include_files:
        description: "A comma-separated list of additional file patterns to include"
        required: false
        type: string
        default: ""
      exclude_pattern:
        description: "A comma-separated list of additional patterns to exclude"
        required: false
        type: string
        default: ""

permissions:
  contents: read
  pull-requests: write

jobs:
  license-header-check:
    name: License Header Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check License Headers
        env:
          EXCLUDE_PATTERN_INPUT: ${{ inputs.exclude_pattern }}
          INCLUDE_FILES_INPUT: ${{ inputs.include_files }}
          COPYRIGHT_LINE_INPUT: ${{ inputs.copyright_line }}
        run: |
          # Disable exit on error to prevent early termination
          set +e

          # A simple script that scans the source files checking for the license header.
          # Exits with a 0 if all source files have license headers
          # Exits with a 1 if one or more source files are missing a license header

          # Include build definitions.
          filetypes=(Makefile Dockerfile .gitignore .dockerignore)
          # Include Golang files.
          filetypes+=("*.go" go.mod)
          # Include Python files.
          filetypes+=("*.py")
          # Include HTML, CSS, JS, TS, SCSS.
          filetypes+=("*.html" "*.htm" "*.css" "*.ts" "*.js" "*.scss")
          # Include shell scripts.
          filetypes+=("*.sh" "*.bash" "*.ksh" "*.csh" "*.tcsh" "*.fsh")
          # Include text.
          filetypes+=("*.txt")
          # Include YAML and TOML files.
          filetypes+=("*.yaml" "*.yml" "*.toml")
          # Include SQL scripts and definitions.
          filetypes+=("*.sql")

          # Add any files types included in the input
          if [[ -n "$INCLUDE_FILES_INPUT" ]]; then
            IFS=',' read -ra additional_files <<< "$INCLUDE_FILES_INPUT"
            for file in "${additional_files[@]}"; do
                filetypes+=("${file}")
            done
          fi

          # Exclude code coming from a third-party. Typically these won't be checked into
          # source control, but occasionally "vendored" code is committed.
          # Build regex pattern with any `exclude_pattern` input values
          base_excludes=("node_modules" "vendor")

          if [[ -n "$EXCLUDE_PATTERN_INPUT" ]]; then
            IFS=',' read -ra additional_excludes <<< "$EXCLUDE_PATTERN_INPUT"
            # Add user-provided excludes to the base excludes
            base_excludes+=("${additional_excludes[@]}")
          fi

          # Build the complete regex pattern by joining all excludes with |
          # This pattern matches either directories or specific filenames anywhere in the path
          exclude_pattern='('
          for i in "${!base_excludes[@]}"; do
            # Escape special regex characters for literal matching
            escaped_exclude=$(printf '%s\n' "${base_excludes[$i]}" | sed 's/[][\.*^$()+?{|]/\\&/g')

            if [[ $i -eq 0 ]]; then
                exclude_pattern="${exclude_pattern}(^|/)${escaped_exclude}(/.*|$)"
            else
                exclude_pattern="${exclude_pattern}|(^|/)${escaped_exclude}(/.*|$)"
            fi
          done
          exclude_pattern="${exclude_pattern})"

          files=()
          while IFS='' read -r line; do files+=("$line"); done < <(git ls-files -c "${filetypes[@]}" | grep -E -v "${exclude_pattern}")

          # This is the copyright line to look for - adjust as necessary using inputs
          copyright_line="$COPYRIGHT_LINE_INPUT"

          # Flag to indicate if we were successful or not
          missing_license_header=0

          # For each file...
          echo "Checking ${#files[@]} source code files for the license header..."
          for file in "${files[@]}"; do
            # echo "Processing file ${file}..."

            # Header is typically one of the first few lines in the file...
            head -4 "${file}" | grep -q "${copyright_line}"
            # Find it? exit code value of 0 indicates the grep found a match
            exit_code=$?
            if [[ ${exit_code} -ne 0 ]]; then
              echo "${file} is missing the license header"
              # update our flag - we'll fail the test
              missing_license_header=1
            fi
          done

          # Summary
          if [[ ${missing_license_header} -eq 1 ]]; then
            echo "One or more source files is missing the license header."
          else
            echo "License check passed."
          fi

          # Exit with status code 0 = success, 1 = failed
          exit ${missing_license_header}